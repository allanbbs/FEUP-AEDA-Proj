//
// Created by allanbs on 15/10/19.
//
#include <sstream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <iostream>
#include <iomanip>
#include "TaxTable.h"

using namespace std;
#ifndef AEDA_PROJ1_CAMIAO_H
#define AEDA_PROJ1_CAMIAO_H
extern TaxTable *table;

/**
 * @brief Class responsable for truck management
 */
class Camiao {
protected:
    unsigned int CargaMax;                  /**<Truck max storage*/
    unsigned int id;                        /**<The truck identification*/
    double totalProfit;                     /**<Total profit generated by a truck in a month**/
public:
    /**
     * Contructor
     * @param carg CargaMax in kg measure
     * @param id The truck identification
     */
    Camiao(const unsigned int& carg, const unsigned int& id);
    /**
     * Default destructor
     */
    virtual ~Camiao();
    /**
     * @return Based on the taxes, max storage and caracteristics, calculates the price for one service
     */
    virtual double cal_preco() = 0;
    /**
     * @return the type of the camiao
     */
    virtual string getType() const = 0;
    /**
     * @brief It computes that the camiao has been added to a service and then increases the total profit
     * 
     */
    void addedToService();
    /**
     * @brief Get the Id parameter
     * 
     * @return int 
     */
    int getId() const { return id; }
    /**
     * @brief Get the Carga Max parameter
     * 
     * @return int 
     */
    int getCargaMax() const {return CargaMax;}
    /**
     * @brief Get the Profit parameter
     * 
     * @return double 
     */
    double getProfit() const {return totalProfit; }


};

/**
 * @brief Class responsable for frozen trucks
 * 
 */
class Congelado : public Camiao {
private:
    double temperatura;                      /**<Temperature*/
    double tax = table->table["Congelado"];/**<Get the taxes*/
public:
    /**
     * Contructor
     * @param carg cargaMax
     * @param disp If it's available or not
     * @param temp Temperature
     */
    Congelado(unsigned int carg, double temp, unsigned int Id);
    /**
     * Default destructor
     */
    ~Congelado();
    /**
     * @brief Get the temperature parameter
     * 
     * @return double 
     */
    double getTemp() const;                
    /**
     * @brief Based on the taxes, max storage and temperature, calculates the price for one service
     * 
     * @return double 
     */
    double cal_preco();
    /**
     * @brief Get the Type parameter
     * 
     * @return string "Congelado"
     */
    string getType() const;
};

/**
 * @brief Class responsable for dangerous trucks
 * 
 */
class Perigoso : public Camiao {
private:
    int quaoPerigoso;                           /**<How dangerous an animal is in a scale of 0-10*/
    double tax = table->table["Perigoso"];      /**<Get the taxes*/
public:
    /**
     * Constructor
     * @param carg cargaMax
     * @param disp If it's available or not
     * @param lvl How dangerous the animal is
     */
    Perigoso(unsigned int carg, int lvl, unsigned int Id);
    /**
     * @brief Destroy the Perigoso object
     * 
     */
    ~Perigoso();
    /**
     * @brief Based on the taxes, max storage and how dangerous it is, calculates the price for one service
     * 
     * @return double 
     */
    double cal_preco();
    /**
     * @brief Get the Level of dangerous
     * 
     * @return int 
     */
    int getLevel() const;  
    /**
     * @brief Get the Type parameter
     * 
     * @return string "Perigoso"
     */
    string getType() const;
};

/**
 * Camiao with animals as product
 */
class Animals : public Camiao {
private:
    int animalCount;                        /**<How many animal there are in a camiao*/
    double tax = table->table["Animal"];    /**<Get the taxes*/
public:
    /**
     * Contructor
     * @param carg CargaMax
     * @param disp If it's available or not
     * @param number id
     */
    Animals(unsigned int carg, int number, unsigned int Id);
    /**
     * @brief Destroy the Animals object
     * 
     */
    ~Animals();   
    /**
     * @brief Get the how many animals there are in the truck
     * 
     * @return int 
     */
    int getAnimalCount() const; 
    /**
     * @brief Based on the taxes, max storage and caracteristics, calculates the price for one service
     * 
     * @return double 
     */
    double cal_preco();
    /**
     * @brief Get the Type parameter
     * 
     * @return string "Animals" 
     */
    string getType() const;
};

class Base: public Camiao{
private:
    double tax = table->table["Base"];      /**<Get the taxes*/
public:
    /**
     * @brief Construct a new Base object
     * 
     * @param carg The actual storage
     * @param Id The Number identification
     */
    Base(unsigned int carg, unsigned int Id): Camiao(carg, Id) {};
    /**
     * @brief Get the Type object
     * 
     * @return string 
     */
    string getType() const;
    /**
     * @brief Based on the taxes and max storage, calculates the price for one service
     * 
     * @return double 
     */
    double cal_preco();

};

/**
 * @brief Compare two trucks
 * 
 * @param c1 Pointer to the argument of the left to be compared
 * @param c2 Pointer to the argument of the right to be compared
 * @return true if the profit in c1<c2. If they have the same profit return true if max storage c1<c2. If they have the same storage return true. 
 * @return false if the profit in c2<c1. If they have the same profit return false if the max storage c2<c1.
 */
bool Compare(const Camiao* c1, const Camiao* c2);
#endif //AEDA_PROJ1_CAMIAO_H
